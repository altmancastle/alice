{"version":3,"sources":["utils/index.tsx","components/showCase/index.tsx","config.tsx","components/pagination/index.tsx","utils/graphql.tsx","utils/service.tsx","pages/home.tsx","pages/detail/index.tsx","pages/category/components/postItem.tsx","pages/labels/index.tsx","pages/category/components/cateItem.tsx","pages/category/index.tsx","pages/layout/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomColor","colorStr","Math","floor","random","toString","toUpperCase","length","format","date","Time","Date","year","getFullYear","month","getMonth","day","getDate","weeks","ShowCase","props","len","info","style","backgroundImage","className","to","number","title","createdAt","bodyText","labels","nodes","map","item","key","id","name","milestone","pageAction","before","after","Pagination","pageInfo","getPaginationAction","handleActionPage","action","cursor","hasPreviousPage","hasNextPage","onClick","startCursor","endCursor","username","repository","params","config","GRAPHQL_URL","access_token","join","graphQLFetch","document","mutation","isQuery","payload","JSON","stringify","ajax","url","method","headers","body","pipe","response","data","catchError","error","console","log","of","Homes","useState","posts","setPosts","setPageInfo","setAction","setCursor","useEffect","subscription","graphql","queryPosts","setPagination","subscribe","res","issues","unsubscribe","Detail","useParams","article","setArticle","Number","issue","getDay","dangerouslySetInnerHTML","articleHtml","__html","dangerouslyHtml","bodyHTML","PostItem","borderImage","label","Labels","isSelected","setIsSelected","selectLabel","setSelectLabel","labelPosts","setLabelPosts","setLabels","handleClick","color","description","CateItem","getnodes","totalCount","Category","milestonePosts","setMilestonePosts","category","setCategory","milestones","index","Header","App","target","href","focusable","viewBox","aria-hidden","d","exact","from","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a272866.chunk.js","sourcesContent":["export function randomColor(){\r\n    const colorStr = Math.floor(Math.random()*0xFFFFFF).toString(16).toUpperCase();\r\n    return colorStr.length===5?`#${colorStr}0`:`#${colorStr}`;\r\n}\r\n\r\nexport function format(date = \"\") {\r\n    if(!date) return \"\";\r\n    const Time = new Date(date);\r\n    let year = Time.getFullYear();\r\n    let month = Time.getMonth() + 1;\r\n    let day = Time.getDate();\r\n    return `${year}年${month}月${day}日`;\r\n}\r\n\r\nconst weeks = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六']\r\nexport function formatWeek() {\r\n    return weeks[new Date().getDay()];\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { CatePost } from '../../utils/types';\r\n\r\nimport { randomColor, format } from '../../utils/index';\r\n\r\nimport './index.scss';\r\n\r\ninterface ShowCase {\r\n  info: CatePost\r\n}\r\n\r\ninterface Label {\r\n    id: string\r\n    name: string\r\n    color: string\r\n    description: string\r\n}\r\n\r\n\r\n\r\nfunction getReadTime(len: number) {\r\n  return Math.floor(len / 360);\r\n}\r\n\r\nconst ShowCase = (props:any) => {\r\n  const { info } = props\r\n\r\n  const style = {\r\n    backgroundImage: `radial-gradient(circle at bottom left,${randomColor()},${randomColor()})`\r\n  }\r\n\r\n  return (\r\n    <div className=\"show-case-bg\">\r\n      <div className=\"show-case\">\r\n        <Link to={`/post/${info.number}`}>\r\n          <div className=\"case-shadow\" style={style}></div>\r\n          <div className=\"case-content\">\r\n              <h3>{info.title}</h3>\r\n              <p>发布于 {format(info.createdAt)} • {getReadTime(info.bodyText.length)}分钟</p>\r\n              <div className=\"list-tags\">\r\n                {info.labels.nodes.map((item:Label)=>(\r\n                  <span key={item.id} > {item.name} </span>\r\n                ))}\r\n                <span> {info.milestone.title} </span>\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowCase;","export default {\r\n\r\n  title: '网站标题',\r\n\r\n  subTitle:'副标题',\r\n\r\n  author:'寒露',\r\n\r\n  GRAPHQL_URL: 'https://api.github.com/graphql',\r\n\r\n  username: \"jackeybiao\",\r\n\r\n  repository: \"walleve\",\r\n\r\n  token:[\"909a710abc251013cb84b\",\"1a8255fe8198a9cff69\"],\r\n\r\n  pageSize: 10,\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nimport config from '../../config';\r\nimport { PageInfo } from '../../utils/types';\r\n\r\nimport \"./index.scss\";\r\n\r\n\r\nexport type PageAction = \"before\" | \"after\" |'';\r\n\r\nconst pageAction = {\r\n  before:'last',\r\n  after:'first'\r\n}\r\n\r\nexport const setPagination = (action:PageAction, cursor:string) => action !== \"\"?\r\n  `\r\n  ${pageAction[action]}:${config.pageSize}\r\n  ${action}:\"${cursor}\"\r\n  `:`first:${config.pageSize}`;\r\n\r\n  \r\ninterface PaginationProps {\r\n    pageInfo: PageInfo\r\n    getPaginationAction: Function\r\n}\r\n\r\nconst Pagination = (props: PaginationProps) => {\r\n\r\n    const { pageInfo, getPaginationAction } = props;\r\n\r\n    const handleActionPage = (action: string,cursor: string) => {\r\n        getPaginationAction(action,cursor);\r\n    }\r\n\r\n    return (\r\n        <>\r\n          {(pageInfo.hasPreviousPage || pageInfo.hasNextPage)?(\r\n              <>\r\n                <div className=\"pageInfo\">\r\n                  {pageInfo.hasPreviousPage?(<div className=\"page-pre\" onClick={()=>{handleActionPage(\"before\", pageInfo.startCursor)}}>上一页</div>):\"\"}\r\n                  {pageInfo.hasNextPage?(<div className=\"page-next\" onClick={()=>{handleActionPage(\"after\", pageInfo.endCursor)}}>下一页</div>):\"\"}\r\n                </div>\r\n              </>\r\n          ):\"\"}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","\r\nexport default {\r\n  /**\r\n   * 获取文章列表\r\n   */\r\n  queryGraphQLPosts : (username: string, repository: string, params: string) => `\r\n    query {\r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        issues(${params}) {\r\n          edges {\r\n            cursor\r\n          }\r\n          pageInfo {\r\n            hasNextPage\r\n            endCursor\r\n            hasPreviousPage\r\n            startCursor\r\n          }\r\n          totalCount\r\n          nodes {\r\n            id\r\n            number\r\n            createdAt\r\n            author {\r\n              url\r\n            }\r\n            bodyText\r\n            bodyHTML\r\n            title\r\n            labels(first: 5) {\r\n              nodes {\r\n                id\r\n                name\r\n                color\r\n              }\r\n            }\r\n            milestone {\r\n              id\r\n              title\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  /**\r\n   * 获取标签\r\n   */\r\n  queryGraphQLLable: (username: string, repository: string) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        labels(first:50) {\r\n          nodes {\r\n            id\r\n            name\r\n            color\r\n            description\r\n            issues(first: 50) {\r\n              totalCount\r\n              nodes {\r\n                number\r\n                title\r\n                createdAt\r\n                labels(first: 5) {\r\n                  nodes {\r\n                    color\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n                id\r\n                author {\r\n                  login\r\n                  url\r\n                }\r\n                milestone {\r\n                  id\r\n                  title\r\n                  number\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  /**\r\n   * 获取分类\r\n   */\r\n  queryGraphQLCategory: (username: string, repository: string) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        milestones(first: 10) {\r\n          nodes {\r\n            id\r\n            title\r\n            description\r\n            issues(first: 100) {\r\n              totalCount\r\n              nodes {\r\n                number\r\n                title\r\n                createdAt\r\n                labels(first: 5) {\r\n                  nodes {\r\n                    color\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n                id\r\n                author {\r\n                  login\r\n                  url\r\n                }\r\n                milestone {\r\n                  id\r\n                  title\r\n                  number\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n\r\n  /**\r\n   * 获取单个文章及其评论\r\n   * 评论只获取最新的15个\r\n   */\r\n  queryGraphQLPostItem: (username: string, repository: string, number: number) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        issue(number:${number}) {\r\n          id\r\n          createdAt\r\n          labels(first:5) {\r\n            nodes {\r\n              id\r\n              name\r\n            }\r\n          }\r\n          milestone {\r\n            title\r\n          }\r\n          author {\r\n            login\r\n            url\r\n          }\r\n          title\r\n          body\r\n          bodyHTML\r\n          comments(last:15) {\r\n            nodes {\r\n              id\r\n              createdAt\r\n              body\r\n              bodyHTML\r\n              databaseId\r\n              createdAt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n\r\n  /**\r\n   * 单个文章添加评论\r\n   * 评论规则：必须 @github账户名称 后才能提交\r\n   */\r\n  mutationGraphQLPostComment: (subjectId: string, body: string) => `\r\n    mutation {\r\n      addComment(input:{subjectId: \"${subjectId}\", body: \"${body}\"}) {\r\n        commentEdge {\r\n          node {\r\n            body\r\n            repository {\r\n              id\r\n              name\r\n              nameWithOwner\r\n            }\r\n            issue {\r\n              number\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n\r\n\r\n}\r\n","import { of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\nimport config from '../config';\r\n\r\nimport graphql from './graphql';\r\n\r\nimport { MutationComment } from './types';\r\n\r\nconst { username, repository, GRAPHQL_URL, token } = config;\r\n\r\nconst access_token = token.join('');\r\n\r\nconst graphQLFetch = (document: string, mutation: boolean = false) => {\r\n  const isQuery = mutation?\"mutation\":\"query\";\r\n  const payload = JSON.stringify({ [isQuery]: document });\r\n  return ajax({\r\n    url: GRAPHQL_URL,\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${access_token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: payload,\r\n  }).pipe(\r\n    map(({response}) => response.data),\r\n    catchError(error => {\r\n      console.log('error: ', error);\r\n      return of(error);\r\n    })\r\n  );\r\n};\r\n\r\nexport const queryPosts = (params: string) => graphQLFetch(graphql.queryGraphQLPosts(username, repository, params));\r\n\r\nexport const queryLabels = () => graphQLFetch(graphql.queryGraphQLLable(username, repository));\r\n\r\nexport const queryCategory = () => graphQLFetch(graphql.queryGraphQLCategory(username, repository));\r\n\r\nexport const queryPostItem = (number: number) => graphQLFetch(graphql.queryGraphQLPostItem(username, repository, number));\r\n\r\nexport const mutationPostComment = (params: MutationComment) => graphQLFetch(graphql.mutationGraphQLPostComment(params.subjectId, params.body), true);\r\n","import React, {useState,useEffect} from 'react';\r\n\r\nimport ShowCase from '../components/showCase/index';\r\n\r\nimport Pagination, { setPagination, PageAction } from '../components/pagination/index';\r\n\r\nimport { queryPosts } from '../utils/service';\r\n\r\nimport { Post, PageInfo } from '../utils/types';\r\n\r\nconst Homes = () => {\r\n\r\n  const [posts, setPosts] = useState([] as Array<Post>);\r\n  const [pageInfo,setPageInfo] = useState({} as PageInfo);\r\n\r\n  const [action,setAction] = useState<PageAction>(\"\");\r\n  const [cursor,setCursor] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    const params = `\r\n      orderBy: {\r\n        field: CREATED_AT\r\n        direction: DESC\r\n      }\r\n      states: OPEN\r\n      ${setPagination(action,cursor)}\r\n    `\r\n    const subscription = queryPosts(params).subscribe(res => {\r\n      setPosts(res.repository.issues.nodes)\r\n      setPageInfo(res.repository.issues.pageInfo)\r\n    })\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  },[action, cursor])\r\n\r\n\r\n  const getPaginationAction = (action:PageAction,cursor:string) => {\r\n    setAction(action);\r\n    setCursor(cursor);\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {posts.map(item => (\r\n        <ShowCase key={item.id} info={item} />\r\n      ))}\r\n      <Pagination pageInfo={pageInfo} getPaginationAction={(action:PageAction, cursor:string)=>{getPaginationAction(action,cursor)}} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Homes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { Post } from '../../utils/types';\r\n\r\nimport { queryPostItem } from '../../utils/service';\r\n\r\nimport { format, formatWeek  } from '../../utils/index';\r\n\r\nimport './index.scss';\r\n\r\nconst Detail = () => {\r\n\r\n  const { id } = useParams();\r\n\r\n  const [article,setArticle] = useState({} as Post);\r\n\r\n  useEffect(()=>{\r\n    const subscription = queryPostItem(Number(id)).subscribe(res => {\r\n      setArticle(res.repository.issue);\r\n    })\r\n    \r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  },[id])\r\n\r\n  const dangerouslyHtml = (articleHtml = \"\") => ({ __html: articleHtml });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {article.title?(\r\n        <article>\r\n          <div className=\"article-title\">\r\n            <h3>{article.title}</h3>\r\n            <div className=\"mate\">\r\n              <span>发布于: {format(article.createdAt)}</span>\r\n              <span>当前: {formatWeek()}</span>\r\n            </div>\r\n            <hr/>\r\n          </div>\r\n          <div dangerouslySetInnerHTML={dangerouslyHtml(article.bodyHTML)}></div>\r\n        </article>\r\n      ):(null)}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { randomColor, format } from '../../../utils/index';\r\n\r\nimport { CatePost } from '../../../utils/types';\r\n\r\n\r\ninterface PostItem {\r\n  item: CatePost\r\n}\r\n\r\nexport function PostItem(props:PostItem) {\r\n  const { item } = props\r\n\r\n  const style = {\r\n    borderImage: `radial-gradient(circle at center,${randomColor()},${randomColor()}) 1`\r\n  }\r\n  return (\r\n    <div className=\"post-item\" style={style}>\r\n      <Link to={`/post/${item.number}`}>\r\n        <h3 className=\"title\">{item.title}</h3>\r\n        <div className=\"meta\">\r\n          <span>{format(item.createdAt)}</span>\r\n          {item.labels.nodes.map(label=>(\r\n            <span key={label.id}>\r\n              {label.name}\r\n            </span>\r\n          ))}\r\n          <span>{item.milestone.title}</span>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem;","import React, {useState,useEffect} from 'react';\r\n\r\nimport { Label,CatePost } from '../../utils/types';\r\n\r\nimport { queryLabels } from '../../utils/service';\r\n\r\nimport PostItem from '../category/components/postItem';\r\n\r\nimport \"./index.scss\";\r\n\r\nconst Labels = () => {\r\n\r\n  const [isSelected,setIsSelected] = useState(false);\r\n\r\n  const [selectLabel,setSelectLabel] = useState<Label>({} as Label);\r\n\r\n  const [labelPosts,setLabelPosts] = useState<Array<CatePost>>([]);\r\n\r\n  const [labels, setLabels] = useState<Array<Label>>([]);\r\n\r\n  useEffect(()=>{\r\n    const subscription = queryLabels().subscribe(res => {\r\n      setLabels(res.repository.labels.nodes)\r\n    })\r\n    \r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  },[])\r\n\r\n\r\n  const handleClick = (item:Label) => {\r\n    if(item && item.issues && item.issues.nodes && item.issues.nodes.length > 0) {\r\n      setLabelPosts(item.issues.nodes);\r\n      setSelectLabel(item);\r\n      setIsSelected(true)\r\n    }else{\r\n      setIsSelected(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {isSelected?(\r\n          <>\r\n          <div className=\"cate-title\">标签：<span onClick={()=>{setIsSelected(false)}}>{selectLabel.name}</span></div>\r\n          {labelPosts.map((item) =>(\r\n            <PostItem key={item.id} item={item} />\r\n          ))}\r\n          </>\r\n        ):(\r\n          <>\r\n            <div className=\"tag\">\r\n              {labels.map(item=>(\r\n                <span onClick={()=>{handleClick(item)}} key={item.id} className=\"tag-item\" style={{color:`#${item.color}`}} title={item.description}>{item.name}</span>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Labels;\r\n","import React from 'react';\r\nimport { Milestone } from '../../../utils/types';\r\n\r\nimport \"./index.scss\";\r\n\r\nimport { randomColor } from '../../../utils';\r\n\r\ninterface ShowItemProps {\r\n  item: Milestone,\r\n  index: number,\r\n  getnodes: Function,\r\n}\r\n\r\nconst CateItem = (props: ShowItemProps) => {\r\n\r\n  const { item, getnodes } = props;\r\n\r\n  const handleClick = (item: Milestone) => {\r\n    if(item && item.issues && item.issues.nodes && item.issues.nodes.length > 0) {\r\n      getnodes(item.issues.nodes);\r\n    }else {\r\n      return getnodes([]);\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    backgroundImage: `linear-gradient(to bottom right,${randomColor()} 30%, ${randomColor()})`\r\n  }\r\n\r\n  return (\r\n    <div onClick={()=>{handleClick(item)}} className=\"cate-item\">\r\n      <div className=\"bg\" style={style}></div>\r\n      <div className=\"mate\">\r\n        <div className=\"info\">\r\n          <span>{item.title} &#40; {item.issues?.totalCount} &#41;</span> <span>{item.description}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default CateItem;","import React, {useState,useEffect} from 'react';\r\n\r\nimport { Milestone, CatePost } from '../../utils/types';\r\n\r\nimport { queryCategory } from '../../utils/service';\r\nimport CateItem from './components/cateItem';\r\nimport PostItem from './components/postItem';\r\n\r\nimport './index.scss';\r\n\r\nconst Category = () => {\r\n\r\n  const [milestonePosts,setMilestonePosts] = useState([] as Array<CatePost>);\r\n\r\n  const [isSelected,setIsSelected] = useState(false);\r\n\r\n  const [category, setCategory] = useState([] as Array<Milestone>);\r\n\r\n  useEffect(()=>{\r\n    const subscription = queryCategory().subscribe(res=>{\r\n      setCategory(res.repository.milestones.nodes)\r\n    })\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  },[])\r\n\r\n  const handleClick = (nodes:Array<CatePost>) => {\r\n    if(nodes.length > 0) {\r\n      setMilestonePosts(nodes);\r\n      setIsSelected(true)\r\n    }else{\r\n      setIsSelected(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {isSelected?(\r\n        <>\r\n          <div className=\"cate-title\">分类：<span onClick={()=>{setIsSelected(false)}}>{milestonePosts[0].milestone.title}</span></div>\r\n          {milestonePosts.map((item) =>(\r\n            <PostItem key={item.id} item={item} />\r\n          ))}\r\n        </>\r\n      ):(\r\n        <>\r\n          {category.map((item,index)=>(\r\n            <CateItem key={item.id} index={index} item={item} getnodes={(nodes:Array<CatePost>)=>{handleClick(nodes)}} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default Category;\r\n","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport \"./index.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/index\">首页</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/category\">分类</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/labels\">标签</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React,{useEffect} from 'react';\r\n\r\nimport { \r\n    HashRouter as Router,\r\n    Route, Switch,Redirect\r\n  } from 'react-router-dom';\r\n\r\nimport Home from './pages/home';\r\nimport Detail from './pages/detail/index';\r\nimport Labels from './pages/labels';\r\nimport Category from './pages/category';\r\n\r\nimport Header from './pages/layout/header';\r\n\r\n\r\nconst App = () => {\r\n  useEffect(()=> {\r\n    const oi = \"color:#FFF;line-height:22px;background:#D68FE9;padding:0 15px;margin-right:15px\";\r\n    const ois = \"color:#000;line-height:22px;\";\r\n    console.log(\"%c寒露%cwww.jackeybiao.com\", oi,ois);\r\n  },[])\r\n\r\n  return (\r\n      <Router>\r\n        <Header />\r\n        <main>\r\n          <div className=\"right-icon\">\r\n              <a target=\"_black\" href=\"https://github.com/MartinHan4079\">\r\n                <svg className=\"github-icon\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg>\r\n              </a>\r\n          </div>\r\n          <Switch>\r\n              <Redirect exact from=\"/\" to=\"/index\" /> \r\n              <Route path=\"/index\" component={Home} />\r\n              <Route path=\"/post/:id\" component={Detail} />\r\n              <Route path=\"/labels\" component={Labels} />\r\n              <Route path=\"/category\" component={Category} />\r\n          </Switch>\r\n        </main>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}